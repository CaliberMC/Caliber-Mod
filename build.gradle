plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.8.4"
}

architectury {
    minecraft = rootProject.minecraft_version
}

version = "${rootProject.mod_version}-${rootProject.minecraft_version}"

def trimChangelog(String text) {
    // Define the regex pattern to match everything after `# Change Log` and up to but not including the first `---`
    def pattern = /(?s)# Change Log\s*(.*?)(?=\n---|$)/
    def matcher = text =~ pattern

    // Check if there are any matches
    if (matcher.size() > 0) {
        // Get the first match and remove leading spaces
        def trimmedEntry = matcher[0][1].replaceAll(/(?m)^ */, '')
        // Return the formatted result in a code block
        return '\n' + trimmedEntry + '\n'
    } else {
        // Return a default message if no match is found
        return '\nNo valid changelog entry found.\n'
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"

    loom {
        silentMojangMappingsLicense()
    }

    def generatedResources = file("src/main/generated/resources")

    sourceSets {
        main {
            resources.srcDir generatedResources
        }
    }


    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            it.parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.mapping_version}")
            it.officialMojangMappings {
                setNameSyntheticMembers(false)
            }
        }
    }

    version = "${project.name}-${rootProject.mod_version}-${rootProject.minecraft_version}"

    var env = System.getenv()
    var modLoader = project.name

    var changelogFile = file("${rootProject.projectDir}/CHANGELOG.md")
    var changelogText = trimChangelog(changelogFile.text)

    if (env.MODRINTH_TOKEN) {
        modrinth {
            projectId = mod_id
            uploadFile = tasks.remapJar
            gameVersions = [minecraft_version]
            if (modLoader == "forge") {
                loaders = ["forge, neoforge"]
            } else loaders = [modLoader]

            changelog = changelogText
            versionNumber = mod_name + " " + modLoader + " " + pub_version
            versionType = "release_type"
            syncBodyFrom = rootProject.file("${rootProject.projectDir}/DESCRIPTION.md").text

            if (modLoader == "fabric") {
                dependencies {
                    required.project "fabric-api"
                }
            } else {
            }
        }
    }

    if (env.CURSEFORGE_TOKEN) {
        curseforge {
            apiKey = env.CURSEFORGE_TOKEN
            project {
                id = rootProject.project_id
                changelog = changelogText
                changelogType = 'markdown'
                releaseType = 'release_type'
                addGameVersion rootProject.minecraft_version

                mainArtifact(tasks.remapJar) {
                    displayName = "${mod_name} + \" \" + modLoader + \" \" + ${pub_version}"
                }

                if (modLoader == "forge") {
                    addGameVersion("NeoForge")
                } else addGameVersion modLoader.capitalize()
                if (modLoader == "fabric") {
                    relations {
                        requiredDependency "fabric-api"
                    }
                } else {
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = "${rootProject.mod_id}"
    }

    group = rootProject.mod_group_id

    repositories {
        mavenLocal()


        maven { url "https://maven.parchmentmc.org" }

        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
        }
        maven { url 'https://jitpack.io' }

        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }
        maven {
            url = 'https://maven.neoforged.net'
        }

        repositories {
            maven { url "https://api.modrinth.com/maven" }
        }

        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of the maven for Registrate and Flywheel
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    task testTrimChangelog {
        doLast {
            // Read the content of the CHANGELOG.md file from the project root
            def changelogFile = file("${rootProject.projectDir}/CHANGELOG.md")
            def changelogText = changelogFile.text

            // Call the trimChangelog function
            def result = trimChangelog(changelogText)

            // Print the result to the console
            println(result)
        }
    }

    jar {
        zip64 true
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : mod_version,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_authors,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }
}
