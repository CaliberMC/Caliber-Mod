plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "caliber-common.mixins.json"
        mixinConfig "caliber.mixins.json"
    }
    runs {
        create("data") {
            data()
            programArgs("--all", "--mod", "caliber")
            programArgs("--output", project(":common").file("src/main/generated/resources").absolutePath)
            programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modImplementation("com.calibermc.caliberlib:caliberlib-forge:${rootProject.caliber_lib_version}-${rootProject.minecraft_version}")
    //modCompileOnly("com.calibermc.caliberlib:caliberlib-forge:${rootProject.caliber_lib_version}-${rootProject.minecraft_version}")
    modImplementation("com.calibermc.buildify:buildify-forge:${rootProject.buildify_version}-${rootProject.minecraft_version}")

    modImplementation("curse.maven:selene-499980:5370702")

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")
    annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

    modCompileOnly "curse.maven:terrablender-563928:4573003"
    modCompileOnly "curse.maven:biomesoplenty-220318:4764804"
    modCompileOnly "curse.maven:regions-unexplored-659110:5151869"

    implementation 'org.jetbrains:annotations:24.1.0'
//    forgeRuntimeLibrary "com.google.code.gson:gson:2.10!!"
//    forgeRuntimeLibrary "org.lwjgl:lwjgl-glfw:3.3.1"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range, loader_version_range: loader_version_range,
        moonlight_version: moonlight_version, mixin_extras_version: mixin_extras_version,
        caliber_lib_version: caliber_lib_version, caliber_lib_version_range: caliber_lib_version_range,
        buildify_version: buildify_version, buildify_version_range: buildify_version_range,
        terrablender_version: terrablender_version, terrablender_version_range: terrablender_version_range,
        biomesoplenty_version: biomesoplenty_version, biomesoplenty_version_range: biomesoplenty_version_range,
        regions_unexplored_version: regions_unexplored_version, regions_unexplored_version_range: regions_unexplored_version_range,
        create_version: create_version, create_version_range: create_version_range,
        flywheel_version: flywheel_version, flywheel_version_range: flywheel_version_range,
        registrate_version: registrate_version,
        resourcefulLibVersion: resourcefulLibVersion, athenaVersion: athenaVersion,
        chipped_version: chipped_version, chipped_version_range: chipped_version_range,
        jei_version: jei_version,
        project_id: project_id,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version, pub_version: pub_version,
        mod_group_id: mod_group_id, mod_authors: mod_authors, mod_description: mod_description,

]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
//    inputs.property "version", project.version
//    filesMatching("META-INF/mods.toml") {
//        expand "version": project.version
//    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId = mod_group_id
            artifactId = mod_id + "-" + project.name
            version = pub_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
