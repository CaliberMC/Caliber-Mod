plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"

    modImplementation("com.calibermc.caliberlib:caliberlib-fabric:${rootProject.caliber_lib_version}-${rootProject.minecraft_version}")
    modImplementation("com.calibermc.buildify:buildify-fabric:${rootProject.buildify_version}-${rootProject.minecraft_version}")
    modCompileOnly("curse.maven:selene-499980:5370700")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}")))
    annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

    modCompileOnly "curse.maven:terrablender-563928:4573003"
    modCompileOnly "curse.maven:biomesoplenty-220318:5300401"

    //modImplementation "curse.maven:biomesoplenty-220318:4764804"

    modCompileOnly "curse.maven:regions-unexplored-659110:5127359"

    modCompileOnly "curse.maven:create-624165:5245234"

    modCompileOnly "curse.maven:chipped-456956:5270040"
    modCompileOnly "curse.maven:resourceful-lib-570073:5361261"
    modCompileOnly "curse.maven:athena-841890:5176880"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

def resourceTargets = ['fabric.mod.json', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: rootProject.minecraft_version, minecraft_version_range: rootProject.minecraft_version_range,
        forge_version: rootProject.forge_version, forge_version_range: rootProject.forge_version_range,
        loader_version_range: rootProject.loader_version_range,
        mod_id: rootProject.mod_id, mod_name: rootProject.mod_name, mod_license: rootProject.mod_license, mod_version: rootProject.mod_version, pub_version: rootProject.pub_version,
        mod_authors: rootProject.mod_authors, mod_description: rootProject.mod_description,
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            groupId = mod_group_id
            artifactId = mod_id + "-" + project.name
            version = pub_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
